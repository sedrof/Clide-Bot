name: Deploy Pump.fun Bot to VPS

on:
  push:
    branches:
      - main
      - deploy-pump-bot
  workflow_dispatch:  # Allow manual deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

      
    - name: Setup SSH Key
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "$SSH_PRIVATE_KEY" > private_key
        chmod 600 private_key

    - name: Debug Deployment Info
      env:
        HOST: ${{ secrets.HOST }}
        USERNAME: ${{ secrets.USERNAME }}
      run: |
        echo "Deploying Pump.fun Bot to $HOST as $USERNAME"
        echo "Target directory: /home/azureuser/pump-bot/"
        if [ -z "$HOST" ]; then
          echo "Error: HOST is not set."
          exit 1
        fi
        if [ -z "$USERNAME" ]; then
          echo "Error: USERNAME is not set."
          exit 1
        fi

    - name: Create deployment directory structure
      env:
        USERNAME: ${{ secrets.USERNAME }}
        HOST: ${{ secrets.HOST }}
      run: |
        ssh -i private_key -o StrictHostKeyChecking=no $USERNAME@$HOST "
          echo 'Creating pump-bot directory structure...'
          mkdir -p /home/azureuser/pump-bot/{config,logs,venv,deployment}
          echo 'Directory structure created successfully'
        "

    - name: Deploy Pump.fun Bot files
      env:
        USERNAME: ${{ secrets.USERNAME }}
        HOST: ${{ secrets.HOST }}
      run: |
        echo "Syncing pump-bot files..."
        rsync -avz --progress \
          --exclude='venv/' \
          --exclude='__pycache__/' \
          --exclude='.git/' \
          --exclude='*.pyc' \
          --exclude='.env' \
          --exclude='logs/*.log' \
          --exclude='node_modules/' \
          -e "ssh -i private_key -o StrictHostKeyChecking=no" \
          . $USERNAME@$HOST:/home/azureuser/pump-bot/

    - name: Install Python dependencies and setup environment
      env:
        USERNAME: ${{ secrets.USERNAME }}
        HOST: ${{ secrets.HOST }}
      run: |
        ssh -i private_key -o StrictHostKeyChecking=no $USERNAME@$HOST "
          cd /home/azureuser/pump-bot
          
          echo 'Installing Python dependencies in user space...'
          export PATH=\"/home/azureuser/.local/bin:\$PATH\"
          
          # Install pip if not available
          which pip3 || python3 -m pip install --user --upgrade pip
          
          echo 'Installing dependencies...'
          # Install using python3 -m pip to ensure we use the right Python
          python3 -m pip install --user --upgrade pip wheel setuptools
          
          # Install main requirements (skip those that fail)
          python3 -m pip install --user solana solders aiohttp websockets python-dateutil || true
          
          # Install additional dependencies for telegram bot and monitoring
          python3 -m pip install --user python-telegram-bot psutil requests aiofiles aiohttp-cors
          
          # Verify critical imports
          python3 -c 'import telegram; print(\"‚úì telegram module OK\")'
          python3 -c 'import psutil; print(\"‚úì psutil module OK\")'
          python3 -c 'import aiofiles; print(\"‚úì aiofiles module OK\")'
          
          echo 'Setting up directories...'
          mkdir -p logs
          chmod 755 logs
          
          echo 'Dependencies installed successfully'
        "

    - name: Setup process management scripts
      env:
        USERNAME: ${{ secrets.USERNAME }}
        HOST: ${{ secrets.HOST }}
      run: |
        ssh -i private_key -o StrictHostKeyChecking=no $USERNAME@$HOST "
          cd /home/azureuser/pump-bot
          
          echo 'Creating process management scripts...'
          
          # Create start script
          cat > start_services.sh << 'EOF'
        #!/bin/bash
        cd /home/azureuser/pump-bot
        export PATH="/home/azureuser/.local/bin:$PATH"

        # Kill existing processes
        pkill -f telegram_controller.py || true
        pkill -f simple_web_monitor.py || true

        sleep 2

        # Start services
        nohup python3 telegram_controller.py > logs/telegram_controller.log 2>&1 &
        echo "Telegram controller started (PID: $!)"

        nohup python3 simple_web_monitor.py > logs/web_monitor.log 2>&1 &
        echo "Web monitor started (PID: $!)"
        EOF
                  
                  chmod +x start_services.sh
                  
                  # Create stop script
                  cat > stop_services.sh << 'EOF'
        #!/bin/bash
        pkill -f telegram_controller.py || true
        pkill -f simple_web_monitor.py || true
        pkill -f 'python.*main.py' || true
        pkill -f 'python.*main_dry_run.py' || true
        echo \"Services stopped\"
        EOF
          
          chmod +x stop_services.sh
          
          echo 'Process management scripts created successfully'
        "

    - name: Create environment file locally
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_AUTHORIZED_USERS: ${{ secrets.TELEGRAM_AUTHORIZED_USERS }}
        DRPC_API_KEY: ${{ secrets.DRPC_API_KEY }}
      run: |
        echo "Creating environment configuration file..."
        echo "TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}" > .env
        echo "TELEGRAM_AUTHORIZED_USERS=${TELEGRAM_AUTHORIZED_USERS}" >> .env
        echo "DRPC_API_KEY=${DRPC_API_KEY}" >> .env
        echo "WEB_MONITOR_PORT=8889" >> .env
        chmod 600 .env

    - name: Deploy environment file and finalize setup
      env:
        USERNAME: ${{ secrets.USERNAME }}
        HOST: ${{ secrets.HOST }}
      run: |
        echo "Copying environment file to VPS..."
        scp -i private_key -o StrictHostKeyChecking=no .env $USERNAME@$HOST:/home/azureuser/pump-bot/.env
        
        ssh -i private_key -o StrictHostKeyChecking=no $USERNAME@$HOST "
          cd /home/azureuser/pump-bot
          
          echo 'Setting secure permissions on environment file...'
          chmod 600 .env
          chown azureuser:azureuser .env
          
          echo 'Environment configuration completed successfully'
        "

    - name: Restart and verify pump-bot services
      env:
        USERNAME: ${{ secrets.USERNAME }}
        HOST: ${{ secrets.HOST }}
      run: |
        ssh -i private_key -o StrictHostKeyChecking=no $USERNAME@$HOST 'bash -s' << 'ENDSSH'
          echo "üîÑ Restarting pump-bot services..."
          
          # First, let's run the services directly without systemd if sudo requires password
          # Kill any existing processes
          pkill -f telegram_controller.py || true
          pkill -f simple_web_monitor.py || true
          pkill -f 'python.*main.py' || true
          pkill -f 'python.*main_dry_run.py' || true
          
          # Give processes time to stop
          sleep 2
          
          # Start services in background
          cd /home/azureuser/pump-bot
          
          # Use the user's local Python installation with already installed packages
          export PATH="/home/azureuser/.local/bin:$PATH"
          
          # Start Telegram controller using python3 directly (no venv needed since packages are in user space)
          nohup python3 telegram_controller.py > logs/telegram_controller.log 2>&1 &
          TELEGRAM_PID=$!
          echo "‚úÖ Telegram controller started (PID: $TELEGRAM_PID)"
          
          # Start Web monitor
          nohup python3 simple_web_monitor.py > logs/web_monitor.log 2>&1 &
          WEB_PID=$!
          echo "‚úÖ Web monitor started (PID: $WEB_PID)"
          
          # Wait for services to stabilize
          sleep 10
          
          # Verify services are running
          echo ''
          echo 'üìä Service Health Check:'
          echo '========================'
          
          # Check if processes are running
          if pgrep -f telegram_controller.py > /dev/null; then
            echo '‚úÖ Telegram Controller: Running'
            tail -5 logs/telegram_controller.log | grep -E '(Started|Running|ERROR)' || echo 'Controller starting...'
          else
            echo '‚ùå Telegram Controller: Failed'
            echo 'Last logs:'
            tail -10 logs/telegram_controller.log || echo 'No logs available'
            exit 1
          fi
          
          # Check Web Monitor
          if pgrep -f simple_web_monitor.py > /dev/null; then
            echo '‚úÖ Web Monitor: Running on port 8889'
            # Test if web server responds
            sleep 2
            if curl -s -o /dev/null -w '%{http_code}' http://localhost:8889 | grep -q '200'; then
              echo '‚úÖ Web Monitor: Responding to requests'
            else
              echo '‚ö†Ô∏è  Web Monitor: Starting up...'
            fi
          else
            echo '‚ùå Web Monitor: Failed'
            echo 'Last logs:'
            tail -10 logs/web_monitor.log || echo 'No logs available'
            exit 1
          fi
          
          echo ''
          echo 'üéâ Deployment completed successfully!'
          echo 'üì± Telegram bot is ready for commands'
          echo "üåê Web monitor available at: http://$(curl -s ifconfig.me):8889"
        ENDSSH

        
    - name: Deployment Summary
      run: |
        echo "üöÄ Pump.fun Bot Deployment Summary:"
        echo "‚úÖ Code deployed to /home/azureuser/pump-bot/"
        echo "‚úÖ Python dependencies installed"
        echo "‚úÖ Systemd services configured"
        echo "‚úÖ Environment variables set"
        echo "‚úÖ Telegram controller started"
        echo "‚úÖ Web monitor started on port 8889"
        echo ""
        echo "üì± Telegram Bot Commands:"
        echo "/start - Open bot control panel"
        echo ""
        echo "üåê Web Monitor:"
        echo "http://YOUR_VPS_IP:8889"
        echo ""
        echo "‚öôÔ∏è Available Services:"
        echo "- pump-bot-telegram (Telegram controller)"
        echo "- pump-bot-web (Web monitor)"
        echo "- pump-bot (Trading bot - controlled via Telegram)"

    - name: Cleanup
      if: always()
      run: |
        rm -f private_key .env