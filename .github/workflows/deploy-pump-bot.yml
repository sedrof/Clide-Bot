name: Deploy Pump.fun Bot to VPS

on:
  push:
    branches:
      - main
      - deploy-pump-bot
  workflow_dispatch:  # Allow manual deployment


jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

      
    - name: Setup SSH Key
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "$SSH_PRIVATE_KEY" > private_key
        chmod 600 private_key

    - name: Debug Deployment Info
      env:
        HOST: ${{ secrets.HOST }}
        USERNAME: ${{ secrets.USERNAME }}
      run: |
        echo "Deploying Pump.fun Bot to $HOST as $USERNAME"
        echo "Target directory: /home/azureuser/pump-bot/"
        if [ -z "$HOST" ]; then
          echo "Error: HOST is not set."
          exit 1
        fi
        if [ -z "$USERNAME" ]; then
          echo "Error: USERNAME is not set."
          exit 1
        fi

    - name: Create deployment directory structure
      env:
        USERNAME: ${{ secrets.USERNAME }}
        HOST: ${{ secrets.HOST }}
      run: |
        ssh -i private_key -o StrictHostKeyChecking=no $USERNAME@$HOST "
          echo 'Creating pump-bot directory structure...'
          mkdir -p /home/azureuser/pump-bot/{config,logs,venv,deployment}
          echo 'Directory structure created successfully'
        "

    - name: Deploy Pump.fun Bot files
      env:
        USERNAME: ${{ secrets.USERNAME }}
        HOST: ${{ secrets.HOST }}
      run: |
        echo "Syncing pump-bot files..."
        rsync -avz --progress \
          --exclude "venv/" \
          --exclude "__pycache__/" \
          --exclude ".git/" \
          --exclude "*.pyc" \
          --exclude ".env" \
          --exclude "logs/*.log" \
          --exclude "node_modules/" \
          -e "ssh -i private_key -o StrictHostKeyChecking=no" \
          . "${USERNAME}@${HOST}:/home/azureuser/pump-bot/"
        if [ $? -ne 0 ]; then
          echo "rsync failed with exit code $?"
          exit 1
        fi

        - name: Install Python dependencies and setup environment
        env:
          USERNAME: ${{ secrets.USERNAME }}
          HOST: ${{ secrets.HOST }}
        run: |
          ssh -i private_key -o StrictHostKeyChecking=no $USERNAME@$HOST '
            cd /home/azureuser/pump-bot
            
            echo "Installing Python dependencies in user space..."
            export PATH="/home/azureuser/.local/bin:$PATH"
            
            # Install pip if not available
            if ! command -v pip3 >/dev/null 2>&1; then
              python3 -m ensurepip --user
              python3 -m pip install --user --upgrade pip
            fi
            
            echo "Installing dependencies..."
            # Upgrade pip, wheel, and setuptools
            python3 -m pip install --user --upgrade pip wheel setuptools
            
            # Install importlib_metadata explicitly to ensure compatibility
            python3 -m pip install --user --upgrade importlib_metadata
            
            # Install main requirements with specific versions to avoid conflicts
            python3 -m pip install --user \
              solana==0.35.1 \
              solders==0.21.0 \
              aiohttp==3.10.9 \
              websockets==11.0.3 \
              python-dateutil==2.9.0.post0
            
            # Install additional dependencies for telegram bot and monitoring
            python3 -m pip install --user \
              python-telegram-bot==21.6 \
              psutil==7.0.0 \
              requests \
              aiofiles==24.1.0 \
              aiohttp-cors==0.7.0
            
            # Verify critical imports (escaped properly for SSH)
            python3 -c "import telegram; print('\''‚úì telegram module OK'\'')"
            python3 -c "import psutil; print('\''‚úì psutil module OK'\'')"
            python3 -c "import aiofiles; print('\''‚úì aiofiles module OK'\'')"
            
            echo "Setting up directories..."
            mkdir -p logs
            chmod 755 logs
            
            echo "Dependencies installed successfully"
          '

    - name: Setup process management scripts
      env:
        USERNAME: ${{ secrets.USERNAME }}
        HOST: ${{ secrets.HOST }}
      run: |
        ssh -i private_key -o StrictHostKeyChecking=no $USERNAME@$HOST "
          cd /home/azureuser/pump-bot
          
          echo 'Creating process management scripts...'
          
          # Create start script
          cat > start_services.sh << 'EOF'
        #!/bin/bash
        cd /home/azureuser/pump-bot
        export PATH="/home/azureuser/.local/bin:$PATH"

        # Kill existing processes
        pkill -f telegram_controller.py || true
        pkill -f simple_web_monitor.py || true

        sleep 2

        # Start services
        nohup python3 telegram_controller.py > logs/telegram_controller.log 2>&1 &
        echo "Telegram controller started (PID: $!)"

        nohup python3 simple_web_monitor.py > logs/web_monitor.log 2>&1 &
        echo "Web monitor started (PID: $!)"
        EOF
                  
                  chmod +x start_services.sh
                  
                  # Create stop script
                  cat > stop_services.sh << 'EOF'
        #!/bin/bash
        pkill -f telegram_controller.py || true
        pkill -f simple_web_monitor.py || true
        pkill -f 'python.*main.py' || true
        pkill -f 'python.*main_dry_run.py' || true
        echo "Services stopped"
        EOF
          
          chmod +x stop_services.sh
          
          echo 'Process management scripts created successfully'
        "

    - name: Create environment file locally
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_AUTHORIZED_USERS: ${{ secrets.TELEGRAM_AUTHORIZED_USERS }}
        DRPC_API_KEY: ${{ secrets.DRPC_API_KEY }}
      run: |
        echo "Creating environment configuration file..."
        echo "TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}" > .env
        echo "TELEGRAM_AUTHORIZED_USERS=${TELEGRAM_AUTHORIZED_USERS}" >> .env
        echo "DRPC_API_KEY=${DRPC_API_KEY}" >> .env
        echo "WEB_MONITOR_PORT=8889" >> .env
        chmod 600 .env

    - name: Deploy environment file and finalize setup
      env:
        USERNAME: ${{ secrets.USERNAME }}
        HOST: ${{ secrets.HOST }}
      run: |
        echo "Copying environment file to VPS..."
        scp -i private_key -o StrictHostKeyChecking=no .env $USERNAME@$HOST:/home/azureuser/pump-bot/.env
        
        ssh -i private_key -o StrictHostKeyChecking=no $USERNAME@$HOST "
          cd /home/azureuser/pump-bot
          
          echo 'Setting secure permissions on environment file...'
          chmod 600 .env
          chown azureuser:azureuser .env
          
          echo 'Environment configuration completed successfully'
        "

    - name: Restart and verify pump-bot services
      env:
        USERNAME: ${{ secrets.USERNAME }}
        HOST: ${{ secrets.HOST }}
      run: |
        ssh -i private_key -o StrictHostKeyChecking=no $USERNAME@$HOST 'bash -s' <<'ENDSSH'
          echo "üîÑ Restarting pump-bot services..."
          pkill -f telegram_controller.py || true
          pkill -f simple_web_monitor.py || true
          pkill -f 'python.*main.py' || true
          pkill -f 'python.*main_dry_run.py' || true
          sleep 2
          cd /home/azureuser/pump-bot
          export PATH="/home/azureuser/.local/bin:$PATH"
          nohup python3 telegram_controller.py > logs/telegram_controller.log 2>&1 &
          TELEGRAM_PID=$!
          echo "‚úÖ Telegram controller started (PID: $TELEGRAM_PID)"
          nohup python3 simple_web_monitor.py > logs/web_monitor.log 2>&1 &
          WEB_PID=$!
          echo "‚úÖ Web monitor started (PID: $WEB_PID)"
          sleep 10
          echo ''
          echo 'üìä Service Health Check:'
          echo '========================'
          if pgrep -f telegram_controller.py > /dev/null; then
            echo '‚úÖ Telegram Controller: Running'
            tail -5 logs/telegram_controller.log | grep -E '(Started|Running|ERROR)' || echo 'Controller starting...'
          else
            echo '‚ùå Telegram Controller: Failed'
            echo 'Last logs:'
            tail -10 logs/telegram_controller.log || echo 'No logs available'
            exit 1
          fi
          if pgrep -f simple_web_monitor.py > /dev/null; then
            echo '‚úÖ Web Monitor: Running on port 8889'
            sleep 2
            STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8889)
            if [ "$STATUS" = "200" ]; then
              echo '‚úÖ Web Monitor: Responding to requests'
            else
              echo '‚ö†Ô∏è  Web Monitor: Starting up...'
            fi
          else
            echo '‚ùå Web Monitor: Failed'
            echo 'Last logs:'
            tail -10 logs/web_monitor.log || echo 'No logs available'
            exit 1
          fi
          echo ''
          echo 'üéâ Deployment completed successfully!'
          echo 'üì± Telegram bot is ready for commands'
          # Print the external IP without command substitution
          MYIP=$(curl -s ifconfig.me)
          echo "üåê Web monitor available at: http://$MYIP:8889"
        ENDSSH
        
    - name: Deployment Summary
      run: |
        echo "üöÄ Pump.fun Bot Deployment Summary:"
        echo "‚úÖ Code deployed to /home/azureuser/pump-bot/"
        echo "‚úÖ Python dependencies installed"
        echo "‚úÖ Systemd services configured"
        echo "‚úÖ Environment variables set"
        echo "‚úÖ Telegram controller started"
        echo "‚úÖ Web monitor started on port 8889"
        echo ""
        echo "üì± Telegram Bot Commands:"
        echo "/start - Open bot control panel"
        echo ""
        echo "üåê Web Monitor:"
        echo "http://YOUR_VPS_IP:8889"
        echo ""
        echo "‚öôÔ∏è Available Services:"
        echo "- pump-bot-telegram (Telegram controller)"
        echo "- pump-bot-web (Web monitor)"
        echo "- pump-bot (Trading bot - controlled via Telegram)"

    - name: Cleanup
      if: always()
      run: |
        rm -f private_key .env